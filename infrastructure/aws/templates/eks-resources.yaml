Description: Creates AWS resources required to manage EKS clusters.
Resources:
###############################################################################
# IAM                                                                         #
###############################################################################

# ClusterRole - associate with a cluster
  kuardClusterServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: kuardClusterServiceRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
            Effect: Allow
            Action: sts:AssumeRole
            Principal: 
              # TODO: Does this grant permission for the eks service to configure the role for the clusters?
              Service: eks.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy

# NodeRole - associate with a nodegroup and therefore all managed node in that nodegroup
  kuardNodeServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: kuardNodeServiceRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
            Effect: Allow
            Action: sts:AssumeRole
            Principal: 
              # TODO: Does this grant permission for the ec2 service to configure the role for the nodes?
              Service: ec2.amazonaws.com  
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        # TODO: Need to figure out CNI.
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy

        
###############################################################################
# VPC                                                                         #
###############################################################################

  # VPC
  kuardVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/24
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags: 
        - Key: project_name
          Value: hello_eks
  kuardIgw:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags: 
        - Key: project_name
          Value: hello_eks
  kuardIgwAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref kuardVpc
      InternetGatewayId: !Ref kuardIgw
  kuardNatEip:
    Type: AWS::EC2::EIP
    Properties:
      Tags: 
        - Key: project_name
          Value: hello_eks

  # VPC - Public Subnet
  kuardPublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref kuardVpc
      AvailabilityZone: us-west-2b
      CidrBlock: 10.0.0.128/25
      MapPublicIpOnLaunch: true
      Tags: 
        - Key: project_name
          Value: hello_eks
          # Used for AWS LoadBalancer
        - Key: Name
          Value: kuardPublicSubnet
        # - Key: kubernetes.io/cluster/hello-eks-cluster  # TODO: parameterize the cluster-name.
        #   Value: owned  # or shared  
        # - Key: kubernetes.io/role/elb
        #   Value: 1
  kuardPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref kuardVpc
      Tags: 
        - Key: project_name
          Value: hello_eks
  kuardIgwRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref kuardPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref kuardIgw
  # Local routes are added by default
  kuardPublicNatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt kuardNatEip.AllocationId
      ConnectivityType: public  # default
      SubnetId: !Ref kuardPublicSubnet
      Tags: 
        - Key: project_name
          Value: hello_eks
  kuardPublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref kuardPublicSubnet
      RouteTableId: !Ref kuardPublicRouteTable

  # VPC - Private Subnet
  kuardPrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref kuardVpc
      AvailabilityZone: us-west-2a
      CidrBlock: 10.0.0.0/25
      Tags: 
        - Key: project_name
          Value: hello_eks
          # Used for AWS LoadBalancerController
        # - Key: kubernetes.io/cluster/hello-eks-cluster  # TODO: parameterize the cluster-name
        #   Value: owned  # or shared
        # - Key: kubernetes.io/role/internal-elb
        #   Value: 1
        - Key: Name
          Value: kuardPrivateSubnet
  kuardPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref kuardVpc
  # Local routes are added by default
  kuardNatRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref kuardPrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref kuardPublicNatGateway
  kuardPrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref kuardPrivateSubnet
      RouteTableId: !Ref kuardPrivateRouteTable

  # TODO: Do we need VPC Endpoint?


###############################################################################
# Security Group                                                              #
###############################################################################
  kuardSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow all TPC inbound traffic
      SecurityGroupIngress: 
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 1
          ToPort: 65535
      Tags: 
        - Key: project_name
          Value: hello_eks
        - Key: Name
          Value: kuardFrontendSecurityGroup
      VpcId: !Ref kuardVpc


###############################################################################
# EKS Cluster                                                                 #
###############################################################################
  kuardCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Version: '1.25'
      Name: hello-eks-cluster
      RoleArn: !GetAtt kuardClusterServiceRole.Arn
      ResourcesVpcConfig:
        EndpointPublicAccess: true  # default
        EndpointPrivateAccess: false  # default
        PublicAccessCidrs: [ "0.0.0.0/0" ]  # default
        SubnetIds:
          - !Ref kuardPublicSubnet
          - !Ref kuardPrivateSubnet
        SecurityGroupIds:
          - !GetAtt kuardSecurityGroup.GroupId
      KubernetesNetworkConfig:
        IpFamily: ipv4  # default
        ServiceIpv4Cidr: 192.168.0.0/16  # this shouldn't overlap with other CIDR block in the VPC.
      AccessConfig:
        AuthenticationMode: CONFIG_MAP  # default
        BootstrapClusterCreatorAdminPermissions: true  # default
      Tags: 
        - Key: project_name
          Value: hello_eks


###############################################################################
# EKS Node Group                                                              #
###############################################################################
  kuardPrivateNodegroup:
    Type: AWS::EKS::Nodegroup
    DependsOn:
      - kuardCluster
      - kuardNodeServiceRole
      - kuardPrivateSubnet
    Properties:
      NodegroupName: privateNg
      ClusterName: !Ref kuardCluster
      NodeRole: !GetAtt kuardNodeServiceRole.Arn
      Subnets:
        - !Ref kuardPrivateSubnet
      AmiType: AL2023_x86_64_STANDARD
      CapacityType: ON_DEMAND
      InstanceTypes: [t2.micro]
      ScalingConfig:
        DesiredSize: 1
        MinSize: 0
        MaxSize: 5
      RemoteAccess:
        Ec2SshKey: skim-to-ec2
      Labels:
        nodeSubnetType: private

  kuardPublicNodegroup:
    Type: AWS::EKS::Nodegroup
    DependsOn:
      - kuardCluster
      - kuardNodeServiceRole
      - kuardPublicSubnet
    Properties:
      NodegroupName: publicNg
      ClusterName: !Ref kuardCluster
      NodeRole: !GetAtt kuardNodeServiceRole.Arn
      Subnets:
        - !Ref kuardPublicSubnet
      AmiType: AL2023_x86_64_STANDARD
      CapacityType: ON_DEMAND
      InstanceTypes: [t2.micro]
      ScalingConfig:
        DesiredSize: 1
        MinSize: 0
        MaxSize: 5
      RemoteAccess:
        Ec2SshKey: skim-to-ec2
      Labels:
        nodeSubnetType: public


# TODO:
# Outputs:
#   tags:
#     Value: !Join
#       - ''
#       - - 'Tag Key: '
#         - !GetAtt kuardVpc.Tags.Key 
#         - ', Value: '
#         - !GetAtt kuardVpc.Tags.Value